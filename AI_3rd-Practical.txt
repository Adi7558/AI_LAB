import java.util.*;

public class BellmanFordSSSP {
    static final int INF = Integer.MAX_VALUE;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the number of vertices: ");
        int V = scanner.nextInt();

        System.out.print("Enter the number of edges: ");
        int E = scanner.nextInt();

        int[][] edges = new int[E][3];

        System.out.println("Enter the edges in format: source destination weight");
        for (int i = 0; i < E; i++) {
            edges[i][0] = scanner.nextInt(); // source
            edges[i][1] = scanner.nextInt(); // destination
            edges[i][2] = scanner.nextInt(); // weight
        }

        System.out.print("Enter the source vertex: ");
        int source = scanner.nextInt();

        int[] dist = bellmanFord(V, E, edges, source);

        System.out.println("Shortest distances from source vertex " + source + " are:");
        for (int i = 0; i < V; i++) {
            System.out.println("Vertex " + i + ": " + dist[i]);
        }

        scanner.close();
    }

    static int[] bellmanFord(int V, int E, int[][] edges, int src) {
        int[] dist = new int[V];

        // Step 1: Initialize distances from src to all other vertices as INFINITE
        Arrays.fill(dist, INF);
        dist[src] = 0;

        // Step 2: Relax all edges V-1 times
        for (int i = 0; i < V - 1; ++i) {
            for (int j = 0; j < E; ++j) {
                int u = edges[j][0];
                int v = edges[j][1];
                int weight = edges[j][2];
                if (dist[u] != INF && dist[u] + weight < dist[v]) {
                    dist[v] = dist[u] + weight;
                }
            }
        }

        // Step 3: Check for negative-weight cycles
        for (int i = 0; i < E; ++i) {
            int u = edges[i][0];
            int v = edges[i][1];
            int weight = edges[i][2];
            if (dist[u] != INF && dist[u] + weight < dist[v]) {
                System.out.println("Graph contains negative weight cycle!");
                // You can handle negative weight cycles according to your requirement
            }
        }

        return dist;
    }
}